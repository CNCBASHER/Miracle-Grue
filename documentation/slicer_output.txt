The slicer output are regions. The region file is json and its format is as follows:

- A version
- The middle z position of the region (in mm)
- The region thickness. 
- Lists of closed polygons (2d coordinates) that define a contour, which is the positive and negative outline(s) of an slice of a volume.
  A single contour may consist of several polygons.  There is an implicit line between the last point of each polygon and the first point in that polygon
  . For clarity: the end points are not duplicated, there are as many segments as there are points.
- The 'inside' of the polygons is defined as whatever is on the right side of the path. For clarity: 'subtracted' polygons will 'wind' counter-clockwise,
  'additive' sections will wind clockwise.
- Polygons are not self intersecting. 
- PROVISIONAL: there may be zero width sections of that contour

## JSON contour file format

CAN: JSON contour file CAN contain elements:

SHOULD: JSON contour SHOULD contain elements:
'thickness':0.4,
'layer_mapping_functions':{'x':'x','y':'y','z'=1}


MUST: JSON contour MUST contain elements:
'jsonns':'http://standards.makerbot.com/2011/cslice/v_1.0.0.0' #json namespace/standard/info
'z_position':0.2,
'materials': [ {'name':'a', 'support':false}, {'name':'b', 'support':true}],
'contours': [{'contour': [[[2.9, 2], [3, 3]],
                           [[3, 5], [5, 6], [3, 3], [9, 8]]],
              'material': 'a'}]

Example JSON section:

OUPUT NOTES:
{
	'thickness':0.4,
	'version': '1.0',
	'z':0.2,
	'materials': [ {'name':'a', 'support':false}, {'name':'b', 'support':true}],
	'contours': [{'contour': [[[2.9, 2], [3, 3]],
                           [[3, 5], [5, 6], [3, 3], [9, 8]]],
              'material': 'a'}]
}


The slicer module processes 3D geometry and provides slices on demand. 

The following 2D geometry formats are used as slicer output:
- .cslice file. A json file containing all contours for a slice, as defined above. One json slice per file. 
- .cslices file.  A json file with many regions as defined above, aka a 'region stack' Also may include metadata about a whole object. 

regions metadata is TBD

Along with outputting the 2d geometry files, the slices can also output settings and metadata. 
This can include warnings, hints for other processing, or cache/queue data for on-disk storage.  This is could include things like:
- cache files location for this set of slices
- warnings or error information for other steps in the process

SVG Viewing:
 Included in this project is a .svg -> .region  and .region -> .svg converter for easier debugging and testing. See grueVisualizer.py
 SVG Path Data: http://www.w3schools.com/svg/svg_path.asp
